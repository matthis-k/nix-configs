--- a/usr/lib/blueberry/blueberry-tray.py
+++ b/usr/lib/blueberry/blueberry-tray.py
@@ -5,8 +5,8 @@ import gettext
 import gi
 gi.require_version('Gtk', '3.0')
 gi.require_version('GnomeBluetooth', '1.0')
-gi.require_version('XApp', '1.0')
-from gi.repository import Gtk, Gdk, GnomeBluetooth, Gio, XApp
+gi.require_version('AppIndicator3', '0.1')
+from gi.repository import AppIndicator3, Gtk, Gdk, GnomeBluetooth, Gio
 import rfkillMagic
 import setproctitle
 import subprocess
@@ -34,13 +34,9 @@ class BluetoothTray(Gtk.Application):
         self.settings = Gio.Settings(schema="org.blueberry")
         self.settings.connect("changed::tray-enabled", self.on_settings_changed_cb)
 
-        self.tray_icon = "blueberry-tray"
-        self.tray_active_icon = "blueberry-tray-active"
-        self.tray_disabled_icon = "blueberry-tray-disabled"
-        if self.settings.get_boolean("use-symbolic-icons"):
-            self.tray_icon = "blueberry-tray-symbolic"
-            self.tray_active_icon = "blueberry-tray-active-symbolic"
-            self.tray_disabled_icon = "blueberry-tray-disabled-symbolic"
+        self.tray_icon = "bluetooth-active"
+        self.tray_active_icon = "bluetooth-active"
+        self.tray_disabled_icon = "bluetooth-disabled"
 
         # If we have no adapter, or disabled tray, end early
         if (not self.rfkill.have_adapter) or (not self.settings.get_boolean("tray-enabled")):
@@ -53,11 +49,15 @@ class BluetoothTray(Gtk.Application):
         self.model.connect('row-deleted', self.update_icon_callback)
         self.model.connect('row-inserted', self.update_icon_callback)
 
-        self.icon = XApp.StatusIcon()
-        self.icon.set_name("blueberry")
-        self.icon.set_tooltip_text(_("Bluetooth"))
-        self.icon.connect("activate", self.on_statusicon_activated)
-        self.icon.connect("button-release-event", self.on_statusicon_released)
+        self.paired_devices = {}
+
+        self.icon = AppIndicator3.Indicator.new(
+            'BlueBerry',
+            'blueberry',
+            AppIndicator3.IndicatorCategory.SYSTEM_SERVICES
+        )
+        self.icon.set_status(AppIndicator3.IndicatorStatus.ACTIVE)
+        self.icon.set_menu(self.build_menu())
 
         self.update_icon_callback(None, None, None)
 
@@ -71,21 +71,18 @@ class BluetoothTray(Gtk.Application):
             return
 
         if self.rfkill.hard_block or self.rfkill.soft_block:
-            self.icon.set_icon_name(self.tray_disabled_icon)
-            self.icon.set_tooltip_text(_("Bluetooth is disabled"))
+            self.icon.set_icon_full(self.tray_disabled_icon, "Bluetooth is disabled")
         else:
-            self.icon.set_icon_name(self.tray_icon)
+            self.icon.set_icon_full(self.tray_icon, "Bluetooth is enabled")
             self.update_connected_state()
 
     def update_connected_state(self):
         self.get_devices()
 
         if len(self.connected_devices) > 0:
-            self.icon.set_icon_name(self.tray_active_icon)
-            self.icon.set_tooltip_text(_("Bluetooth: Connected to %s") % (", ".join(self.connected_devices)))
+            self.icon.set_icon_full(self.tray_active_icon, _("Bluetooth: Connected to %s") % (", ".join(self.connected_devices)))
         else:
-            self.icon.set_icon_name(self.tray_icon)
-            self.icon.set_tooltip_text(_("Bluetooth"))
+            self.icon.set_icon_full(self.tray_icon, "Bluetooth")
 
     def get_devices(self):
         self.connected_devices = []
@@ -117,13 +114,14 @@ class BluetoothTray(Gtk.Application):
 
                 iter = self.model.iter_next(iter)
 
-    def on_statusicon_activated(self, icon, button, time):
-        if button == Gdk.BUTTON_PRIMARY:
-            subprocess.Popen(["blueberry"])
+    def start_blueberry(self):
+        subprocess.Popen(["blueberry"])
 
-    def on_statusicon_released(self, icon, x, y, button, time, position):
-        if button == 3:
+    def build_menu(self):
             menu = Gtk.Menu()
+            blueberry_exec = Gtk.MenuItem(label=_("BlueBerry"))
+            blueberry_exec.connect("activate", self.start_blueberry)
+            menu.append(blueberry_exec)
 
             if not self.rfkill.hard_block:
                 if self.rfkill.soft_block:
@@ -168,7 +166,7 @@ class BluetoothTray(Gtk.Application):
             menu.append(item)
 
             menu.show_all()
-            icon.popup_menu(menu, x, y, button, time, position)
+            return menu
 
     def toggle_connect_cb(self, item, data = None):
         proxy = self.paired_devices[data]
        proxy = self.paired_devices[data]
